#!/usr/bin/env bash

# `git branch` wrapper
#   - If listing branches, format, highlight and sort the list.
#   - If creating a branch, automatically check it out.

# Colored & formatted list of branches
if [ "$1" = "" ]; then
    refbranch=$1
    count=$2
#    \git for-each-ref --sort=-committerdate refs/heads \
#        --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' \
#        --color=always \
#        --count=${count:-20} \
#        | while read line; do
#        #echo $line
#            branch=$(echo "$line" | awk 'BEGIN { FS = "|" }; { print $1 }' | tr -d '*')
#            ahead=$(git rev-list --count "${refbranch:-origin/stage}..${branch}")
#            behind=$(git rev-list --count "${branch}..${refbranch:-origin/stage}")
#            colorline=$(echo "$line" | sed 's/^[^|]*|//'); echo "$colorline|$ahead|$behind" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1'
#        done | ( printf $'\033[1;93m'" branch|  last|message| author| ahead| behind\n"$'\033[0m' && cat) | column -x -t -s'|'

    cur_branch=$(command git rev-parse --abbrev-ref HEAD)
    color_end=$'\e[0m'
    while read -r line; do
        if [ ! -z "$line" ]; then
            parts=(${line// / })
            if [ "${parts[3]}" = "${cur_branch}" ]; then
                color_start=$'\e[1;92m'
                curr_char='*'
            else
                color_start=$'\e[0;94m'
                curr_char=' '
            fi
            echo "${color_start}${curr_char} ${parts[0]} ${parts[1]} ${color_start}${parts[3]}${color_end}"
        fi
    done <<< "$(git for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:iso) %(refname:short)')"
else

    # use the unaliased git command
    /usr/bin/env git branch "${@:1}"

    # checkout the specified branch, if any
    if [ "$2" = "" ]; then
        /usr/bin/env git checkout "${1}"
    fi
fi
