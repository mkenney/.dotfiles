# auth() - Authenticate against AWS roles using aquaduck. If no arguments are
# passed, authenticate into aws and the docker repository, and generate SSH keys
# for gateway servers.
#
# - authenticate docker:  `auth docker`
# - authenticate SSH:     `auth ssh vfe-test` (uses aquaduck)
# - authenticate aws-cli: `auth vfe-test`
case "$1" in
    # Docker
    "docker")
        echo "authenticating docker into AWS ECR"
        old_vault=$AWS_VAULT
        unset AWS_VAULT && aws-vault exec eo -- aws ecr get-login-password --region us-east-1 | docker login \
            --username AWS \
            --password-stdin \
            596297932419.dkr.ecr.us-east-1.amazonaws.com
        exit_code=$?; if [ "0" != "$exit_code" ]; then echo "Authenticating Docker into the 'eo' account failed"; return $exit_code; fi
        unset AWS_VAULT && aws-vault exec vfe-prod -- aws ecr get-login-password --region us-east-1 | docker login \
            --username AWS \
            --password-stdin \
            616752873841.dkr.ecr.us-east-1.amazonaws.com
        exit_code=$?; if [ "0" != "$exit_code" ]; then echo "Authenticating Docker into the 'vfe-prod' account failed"; return $exit_code; fi
        unset AWS_VAULT && eval "export AWS_VAULT=$old_vault"
    ;;

    # Default to AWS
    *)
        # all this is just to authenticate the current shell without exec-ing
        # into a new subshell which is super annoying.
        unset AWS_VAULT
        echo "aws-vault exec ${1}"
        while read -r a; do
            eval "export $a"
            exit_code=$?; if [ "0" != "$exit_code" ]; then echo "Authenticating into the '${1}' account failed"; return $exit_code; fi
        done <<< "$(aws-vault exec ${1} -- env | grep ^AWS_)"
        exit_code=$?; if [ "0" != "$exit_code" ]; then echo "Authenticating into the '${1}' account failed"; return $exit_code; fi
    ;;
esac
