# kx() - Authenticate into a kubernetes cluster and set the appropriate context.
# If no arguments are passed, print the current context.
#
# i.e. `kx vfe test 2`
# i.e. `kx kops test 2`
# i.e. `kx eo test 5`

cluster=
env=$2
default_namespace=
profile=
workload="workload${3}"
region='us-east-1'
if [ "" != "$4" ]; then
    region=$4
fi

if [ "" = "$__K8S_LAST_CONTEXT" ]; then
    export __K8S_LAST_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null)
fi

case "$1" in
    "")
        echo $(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null)
        return
    ;;
    "-")
        cluster=$__K8S_LAST_CONTEXT
        if [ "" = "$cluster" ]; then
            >&2 echo "kubernetes context is not set"
            return 1
        fi
        if echo "$cluster" | grep -q ".k8s."; then
            export __K8S_LAST_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null)
            export KUBECONFIG=${HOME}/.kube/${cluster}/config.kops
            $(aquaduck auth kube $cluster --k8s-auth-type=kops -p $profile)
        else
            aws eks --region us-east-1 update-kubeconfig --name $cluster
        fi
        export __K8S_LAST_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null)
    ;;
    "eo")
        if [ "tst" = "$env" ]; then
            env="test"
        fi
        profile="${1}"
        cluster="${workload}-${region}-rp-${profile}-${env}"
        default_namespace="eo"

        auth $profile
        aws eks --region us-east-1 update-kubeconfig --name $cluster

        export __K8S_LAST_CONTEXT=$last
    ;;
#     "kops")
#         profile='eo'
#         if [ "prod" = "$env" ]; then
#             env=
#         fi
#         if [ "test" = "$env" ]; then
#             env="tst."
#         fi
#         auth eo
#         cluster="${workload}.k8s.${env}returnpath.net"
#         default_namespace="eo"
#         echo "cluseter $cluster"
#         #echo aws eks --region us-east-1 update-kubeconfig --name $cluster &> /dev/null
#         export __K8S_LAST_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null)
#         mkdir "${HOME}/.kube/${cluster}"
# #            if [ !-f "${HOME}/.kube/${cluster}/config.kops" ]; then
# #                cat
# #            fi
#         export KUBECONFIG=${HOME}/.kube/${cluster}/config.kops
#         $(aquaduck auth kube $cluster --k8s-auth-type=kops -p $profile)
#     ;;
    *)
        if [ "tst" = "$env" ]; then
            env="test"
        fi
        profile="${1}-${2}"
        cluster="${workload}-us-east-1-${profile}"
        default_namespace="vfe"

        #env cp -f ~/.kube/config ~/.kube/config.${cluster}
        export KUBECONFIG=${HOME}/.kube/config.${cluster}
        export __K8S_LAST_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null)

        auth $profile
        aws eks --region us-east-1 update-kubeconfig --name $cluster
    ;;
esac

# Switch to the specified context
ctxkey=$(basename $(kubectl config view -o=jsonpath='{.current-context}' 2> /dev/null) 2> /dev/null)
if [ "" != "$default_namespace" ]; then
    if [ "" = "${__K8S_CURR_NAMESPACE}" ] || [ "" = "${__K8S_CURR_NAMESPACE[$ctxkey]}" ]; then
        __K8S_CURR_NAMESPACE[$ctxkey]=$default_namespace
        export -A __K8S_CURR_NAMESPACE
    fi
fi

# Make sure it lands in the expected namespace
#kn ${__K8S_CURR_NAMESPACE[$ctxkey]}
#kp on








# # set the k8s config path and executable, defining the current context. Assumes
# # the path to the config files is `$HOME/.kube/<path argument here>/config` and
# # the path to the executable is `$HOME/.kube/<path argument here>/kubectl`
# #
# # different executables because of version differences across clusters... :(
# K8S_LAST_NAMESPACE[$K8S_CURRENT_CONTEXT]=$K8S_CURRENT_NAMESPACE
# eval "export -l K8S_LAST_NAMESPACE"

# if [ "-" = "$1" ]; then
#     a=$KUBECONFIG
#     eval "export KUBECONFIG=$__LAST_KUBECONFIG"
#     eval "export __LAST_KUBECONFIG=$a"
# #elif [ "" != "$1" -a \( -d "~/.kube/$1" -o -L "~/.kube/$1" \) ]; then
# elif [ "" != "$1" ] && [ -d "$HOME/.kube/$1" ]; then
#     conf_path="$HOME/.kube/$1"
#     cluster=$1
#     if [ -L "$HOME/.kube/$1" ]; then
#         conf_path=$(readlink "$HOME/.kube/$1")
#         cluster=$(basename $conf_path)
#     fi

#     if [ "vfe.prod" = "$1" ]; then
#         eval $(aquaduck auth kube $cluster --k8s-auth-type kops -n vfe -p vfe-prod)
#     elif [ "vfe.tst" = "$1" ]; then
#         eval $(aquaduck auth kube $cluster --k8s-auth-type kops -n vfe -p vfe-test)
#     else
#         eval $(aquaduck auth kube $cluster --k8s-auth-type kops -n eo -p eo)
#     fi

#     if [ -f "$HOME/.kube/$conf_path/config.vault" ]; then
#         eval "export __LAST_KUBECONFIG=$KUBECONFIG"
#         eval "export KUBECONFIG=$HOME/.kube/$conf_path/config.vault"
#     elif [ -f "$HOME/.kube/$conf_path/config" ]; then
#         eval "export __LAST_KUBECONFIG=$KUBECONFIG"
#         eval "export KUBECONFIG=$HOME/.kube/$conf_path/config"
#     elif [ -f "$HOME/.kube/$conf_path/config.kops" ]; then
#         eval "export __LAST_KUBECONFIG=$KUBECONFIG"
#         eval "export KUBECONFIG=$HOME/.kube/$conf_path/config.kops"
#     else
#         >&2 echo "File not found: $HOME/.kube/$conf_path/config"
#         return 1
#     fi
# else
#     eval "export __LAST_KUBECONFIG=$KUBECONFIG"
#     eval "export KUBECONFIG=$KUBECONFIG_DEFAULT"
# fi
# if [ "$KUBECONFIG_DEFAULT" != "$KUBECONFIG" ]; then
#     eval "export __KUBECONFIG_UPDATED_AT=$(date '+%s')"
# fi
# K8S_CURRENT_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}')

# eval "export K8S_CURRENT_CONTEXT=$K8S_CURRENT_CONTEXT"
# eval "export K8S_CURRENT_NAMESPACE=$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"$K8S_CURRENT_CONTEXT\")].context.namespace}")"
# if [ "" != "${K8S_NAMESPACES[$K8S_CURRENT_CONTEXT]}" ]; then
#     K8S_NAMESPACES[$K8S_CURRENT_CONTEXT]=$(kubectl get namespaces | grep -vE 'NAME.*STATUS.*AGE.*' | awk '{print $1}')
#     eval "export -l K8S_NAMESPACES"
# fi

# if [ "" = "${K8S_LAST_NAMESPACE[$K8S_CURRENT_CONTEXT]}" ]; then
#     K8S_LAST_NAMESPACE[$K8S_CURRENT_CONTEXT]=$K8S_CURRENT_NAMESPACE
# else
#     K8S_CURRENT_NAMESPACE=${K8S_LAST_NAMESPACE[$K8S_CURRENT_CONTEXT]}
#     kubectl config set-context "$K8S_CURRENT_CONTEXT" --namespace="$K8S_CURRENT_NAMESPACE"
# fi
# eval "export -l K8S_LAST_NAMESPACE"
