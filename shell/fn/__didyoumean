#!/usr/bin/env bash

# didyoumean error manager
tmpfile=$(mktemp)
thatswhatimeant=0
orig_cmd=$2
"$@" 2> $tmpfile
exit_code=$?
dym_errors=$(cat $tmpfile)
#rm -f $tmpfile
if [ "" != "$exit_code" ] && [ "0" != "$exit_code" ]; then
    # Display a menu for "did you mean" error suggestions
    if [ "" != "$(echo "$dym_errors" | egrep -i "(Did you mean)|(The most similar command)")" ]; then
        declare -a options
        reading_options=0
        while read -r line; do
            line="$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
            if [ "" = "$line" ]; then
                reading_options=0
            fi
            if [ 1 -eq $reading_options ]; then
                options+=($line)
            fi
            if [ "" != "$(echo "$line" | egrep -i "(Did you mean)|(The most similar command)")" ]; then
                reading_options=1
            fi
        done <<< "$dym_errors"

        # rebuild error output
        bad_command=$(echo "$dym_errors" | awk -F '"' '$0=$2' | xargs)
        if [ "" = "$bad_command" ]; then
            bad_command=$(echo "$dym_errors" | awk -F "'" '$0=$2' | xargs)
        fi
        >&2 echo "$2: '$bad_command' is not a $2 command. See '$2 --help'."
        >&2 echo

        # print error message
        if [ 1 -eq "${#options[@]}" ]; then
            >&2 echo "    Did you mean this?"
        else
            >&2 echo "    Did you mean one of these?"
        fi

        # print input menu
        cnt=0
        for a in "${options[@]}"; do
            if [ 1 -eq "${#options[@]}" ]; then
                opt_key=""
            else
                opt_key="$((cnt + 1)):"
            fi
            >&2 echo "        $opt_key $a"
            cnt=$((cnt + 1))
        done
        >&2 echo
        if [ 1 -eq $cnt ]; then
            prmpt="[Y/n] > "
        else
            >&2 echo "        0: quit"
            >&2 echo
            prmpt="[1] > "
        fi

        # prompt for input
        tmpIFS=$IFS
        IFS='%'
        option=$(bash -c "read -e -p \"$prmpt\" -t 60 tmp; echo \$tmp")
        IFS=$tmpIFS
        tmpIFS=

        # process no/quit
        if [ "0" = "$option" ] || [ "n" = "$option" ] || [ "N" = "$option" ] || [ "q" = "$option" ]; then
            option="quit"
        # set default option
        elif [ "" = "$option" ] || [ "Y" = "$option" ] || [ "y" = "$option" ]; then
            option=1
        # map input to array index
        elif [ "$option" ] && [ -z "${option//[0-9]}" ]; then
            #option=$((option - 1)) # indexing from 1 in zsh?
        else
            option="quit"
        fi
        if [ "quit" = "$option" ]; then
            echo "quit."
        else
            echo "executing $1 $2 ${options[$option]} ${@:4}"
            echo
            $1 $2 ${options[$option]} ${@:4}
            thatswhatimeant=1
        fi
    else
        echo "$dym_errors"
        return $exit_code
    fi
else
    echo "$dym_errors"
    return $exit_code
fi
