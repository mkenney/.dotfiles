#!/usr/bin/env python

# README:
# pip install python-jenkins
#   https://python-jenkins.readthedocs.org/en/latest/example.html
# configure user as your git author name
# configure jenkins user as your jenkins username
# configure jenkins api as your jenkins api token
#   http://jenkins0.dev.returnpath.net/user/<username>/configure
#   Click "Show My Token" button


import urllib
import urllib2
import json
import httplib
import jenkins
from time import sleep;
import pprint
import sys
import time

user = 'Rob Walsh'
configs = [
    {   'jenkins_host': 'jenkins0.dev.returnpath.net',
        'jenkins_user': 'rwalsh',
        'jenkins_api': '',
    },
    {   'jenkins_host': 'jenkins.dev.returnpath.net',
        'jenkins_user': 'rmwalsh',
        'jenkins_api': '',
    },
]

pp = pprint.PrettyPrinter(indent=4)

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

gerrit_url = 'http://gerrit.dev.returnpath.net/changes/?q=is:open+owner:'
gerrit_url += urllib.quote('"%s"' % (user))
gerrit_url += '&o=CURRENT_REVISION'

changes = urllib2.urlopen(gerrit_url)
changes = json.loads(''.join(changes.readlines()[1:]))

count = commit_id = 0
commits = {}

if(len(changes) > 0):

    code_reviews = ('\nCode Reviews Currently Open For %s: [TEST]' % (user))
    print (bcolors.HEADER + code_reviews)
    print (len(code_reviews) -1 )* '=' + '\n' + bcolors.ENDC

    for change in changes:
        count += 1
        print((bcolors.OKGREEN + '[%d]' + bcolors.ENDC + ' %s - %s') % (count, change['project'], change['subject']))
        commits[count] = {}
        commits[count]['id'] = change['_number']
        commits[count]['revs'] = change['revisions'][change['current_revision']]['_number']
        commits[count]['project'] = change['project']


# we do this to prevent fat fingers
count += 1

# START PROD


prod_start = count
gerrit_url = 'http://gerrit.dev.returnpath.net/changes/?q=status:merged+limit:9+owner:'
gerrit_url += urllib.quote('"%s"' % (user))

changes = None
changes = urllib2.urlopen(gerrit_url)
changes = json.loads(''.join(changes.readlines()[1:]))

if(len(changes) > 0):

    code_reviews = ('\n\nMerged projects for %s: [PROD]' % (user))
    print (bcolors.WARNING + code_reviews)
    print (len(code_reviews) -1 )* '=' + '\n' + bcolors.ENDC

    projects = []
    for change in changes:
        if change['project'] not in projects:
            count += 1
            projects.append(change['project'])
            print((bcolors.FAIL + '[%d]' + bcolors.ENDC +' %s') % (count, change['project']))
            commits[count] = {}
            commits[count]['project'] = change['project']


if(count > 0):
    commit_id = raw_input('\n\nWhich commit would you like to push? (q to quit)  ')
elif(count == 0):
    print ("No open or merged code for %s" % user)
    exit

if(commit_id == 'q'):
    exit
else:
    commit_id = int(commit_id)
    if(commit_id not in commits):
        print (bcolors.FAIL + "Not a valid selection" + bcolors.ENDC)
        sys.exit(0)

    commit = commits[commit_id]
    project = commit['project']


    if(commit_id < prod_start):
        short_id = str(commit['id'])[-2:]
        commit_id = commit['id']
        rev = commit['revs']
        print('\nStarting Build for Commit %s Revision %s\n' % (commit_id, rev))
        refspec = ('refs/changes/%s/%s/%s' % (short_id, commit_id, rev))
        build_params = {'Action': 'Build_and_Stage_Branch','GERRIT_BRANCH': 'master', 'GERRIT_REFSPEC': refspec}
    else:
        print('\nStarting Build for %s \n' % (project))
        build_params = {'Action': 'Release','GERRIT_BRANCH': 'master', 'GERRIT_REFSPEC': 'refs/heads/master'}

    for cfg in configs:
        j = jenkins.Jenkins('http://' + cfg['jenkins_host'], cfg['jenkins_user'], cfg['jenkins_api'])
        if not j.job_exists(commit['project']):
            j = False
        else:
            break

    if not j:
        print ((bcolors.FAIL + "Unable to find %s in your jenkins configs" + bcolors.ENDC) % project)
        sys.exit(1)

    job_info = j.get_job_info(project)
    next_build_number = job_info['nextBuildNumber']
    j.build_job(project, build_params)

    result = None
    start = time.time()
    build_info = {'estimatedDuration': 'waiting'}
    link_printed = False
    sleep(2)
    count = 0
    spinner = ['\\','|','/','-']
    spin = ''
    while result == None:
        spin = spinner[count % 4]
        try:
            build_info = j.get_build_info(project, next_build_number)
            result = build_info['result']
            if result != None:
                break
        except:
            pass
        duration = time.time() - start
        if build_info['estimatedDuration'] == 'waiting':
            sys.stdout.write("[%s] Waiting for build to start... \r" % spin)
        else:
            if not link_printed:
                link_printed = True
                print "Build started, see your build here: \n{url}\n\n".format(url=build_info['url'])
                count =0

            seconds = max(build_info['estimatedDuration']/1000 - duration, 0)
            if(seconds > 0):
                m, s = divmod(seconds, 60)
                h, m = divmod(m, 60)
                sys.stdout.write("[%s] Estimated time remaining: %d:%02d:%02d \r" % (spin, h, m, s))
            else:
                m, s = divmod(count, 60)
                h, m = divmod(m, 60)
                sys.stdout.write("[%s] Elapsed time: %d:%02d:%02d             \r" % (spin, h, m, s))

        sys.stdout.flush()
        sleep(1)
        count += 1

    if(build_info['result'] == "SUCCESS"):
        print bcolors.OKGREEN
    else:
        print bcolors.FAIL

    print '\nBuild {result}, see your build here: \n{url}\n\n'.format(result=build_info['result'], url=build_info['url'])
    print bcolors.ENDC