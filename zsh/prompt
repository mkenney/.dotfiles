#!/bin/zsh

# setup
autoload -U colors && colors
export LSCOLORS="ExGxcxdxcxegedcbcdacad"
setopt prompt_subst
source ~/.dotfiles/common/color

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=
GIT_PS1_SHOWUPSTREAM=1

# put fancy stuff on the right
#RPS1=`date "+%Y-%m-%d"`

#
# user/host/path status
#
__prompt_uid() {
    if [ "$EUID" = "0" ]; then # Root
        echo "
â”Œ(%{$COLOR_RED_BLINK%}%n%{$COLOR_YELLOW%}@%M%{$COLOR_NORM%}) - %{$COLOR_NORM%}%/%{$COLOR_NORM%}"
    else
        echo "
â”Œ(%{$COLOR_GREEN%}%n%{$COLOR_YELLOW%}@%M%{$COLOR_NORM%}) - %{$COLOR_NORM%}%/%{$COLOR_NORM%}"
    fi
}

__git_status() {
    local output=0
    local modified=0
    local modified_str=
    local added=0
    local added_str=
    local renamed=0
    local renamed_str=
    local deleted=0
    local deleted_str=
    local untracked=0
    local untracked_str=
    local unstaged_str=
    local total=0
    local ahead_str=
    local behind_str=
    local branch_name=$(git rev-parse --abbrev-ref HEAD)
    local origin=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})

    if [ "" != "$(git rev-list $origin..HEAD)" ]; then
        ahead_str="a$(git rev-list $origin..HEAD 2> /dev/null | wc | awk '{print $1}') "
        output=1
    fi

    if [ "" != "$(git rev-list HEAD..$origin)" ]; then
        behind_str="b$(git rev-list HEAD..$origin 2> /dev/null | wc | awk '{print $1}') "
        output=1
    fi

    if [ "" != "$(git diff --name-only)" ]; then
        unstaged_str="*$(git diff --name-only | wc | awk '{print $1}') "
        output=1
    fi


    while read line; do
        flag1=${line:0:1}
        flag2=${line:1:1}
        if [ "" != "$line" ]; then
            if [ "?" = "$flag1" ] || [ "?" = "$flag2" ]; then
                untracked=$((untracked + 1))
                untracked_str="?$untracked "
                output=1
                total=$((total + 1))
            fi
            if [ "A" = "$flag1" ] || [ "A" = "$flag2" ]; then
                added=$((added + 1))
                added_str="+$added "
                output=1
                total=$((total + 1))
            fi
            if [ "D" = "$flag1" ] || [ "D" = "$flag2" ]; then
                deleted=$((deleted + 1))
                deleted_str="X$deleted "
                output=1
                total=$((total + 1))
            fi
            if [ "M" = "$flag1" ] || [ "M" = "$flag2" ]; then
                modified=$((modified + 1))
                modified_str="â‰ $modified "
                output=1
                total=$((total + 1))
            fi
            if [ "R" = "$flag1" ] || [ "R" = "$flag2" ]; then
                renamed=$((renamed + 1))
                renamed_str="â¤¿ $renamed "
                output=1
                total=$((total + 1))
            fi
        fi
    done << EOF
$(git status --porcelain)
EOF

    if [ 0 -lt $total ]; then
        total_str="#$total "
        output=1
    fi

    if [ 0 -ne $output ]; then
        echo "$(echo -e "${behind_str}${ahead_str}${branch_name} ${untracked_str}${added_str}${deleted_str}${renamed_str}${modified_str}${unstaged_str}${total_str}" | sed -e 's/[[:space:]]*$//')"
    else
        echo "${branch_name}"
    fi
}

#
# git status line
#
__prompt_git() {
    # In a git repo
    if [ "" != "$(git rev-parse --git-dir 2> /dev/null)" ]; then

        echo "
â”œ[${COLOR_BLUE_FADED}git: ${branch}$(__git_status)${COLOR_NORM}]"
    fi
}

__prompt_cmd() {
    last_status=$1
    if [ "0" = "$last_status" ]; then
        echo "
â””(%{$COLOR_GREEN%}%*%{$COLOR_NORM%})%{%F{240}%}(zsh)%{%f%}â†’ "
    else
        echo "
â””(ðŸ’€ )%{%F{240}%}(zsh)%{$COLOR_NORM%}â¤³ " # Last script exited with a non-zero code
    fi
}
__zsh_prompt() {
    # Make the cursor a blinking vertical line
    # http://stackoverflow.com/questions/4416909/anyway-change-the-cursor-vertical-line-instead-of-a-box
    last_status=$?
    echo "$(__prompt_uid)$(__prompt_git)$(__prompt_cmd $last_status)$(echo -e -n "\x1b[\x35 q")"
}

# basic prompt on the left
#PROMPT=$ps1_lines
PROMPT='$(__zsh_prompt)'
