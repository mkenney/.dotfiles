#!/usr/bin/env bash

# set the k8s config path and executable, defining the current context. Assumes
# the path to the config files is `$HOME/.kube/<path argument here>/config` and
# the path to the executable is `$HOME/.kube/<path argument here>/kubectl`
#
# different executables because of version differences across clusters... :(
kctx() {
    if [ "-" = "$1" ]; then
        a=$KUBECONFIG
        eval "export KUBECONFIG=$__LAST_KUBECONFIG"
        eval "export __LAST_KUBECONFIG=$a"
    elif [ "" != "$1" ]; then
        eval "export __LAST_KUBECONFIG=$KUBECONFIG"
        eval "export KUBECONFIG=$HOME/.kube/$1/config"
    else
        eval "export __LAST_KUBECONFIG=$KUBECONFIG"
        eval "export KUBECONFIG=$HOME/.kube/config"
    fi
    eval "alias k='$(dirname $KUBECONFIG)/kubectl'"
    eval "export K8S_CURRENT_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}')"
}
export KUBECONFIG=$HOME/.kube/config
export K8S_CURRENT_CONTEXT=$(kubectl config view -o=jsonpath='{.current-context}')
alias k=$HOME/.kube/kubectl

# get/set the namespace for the current k8s context
# `kns`             - print the current namespace
# `kns <namespace>` - set the current namespace to <namespace>
kns() {
    if [ "-" = "$1" ]; then
        a=$K8S_CURRENT_NAMESPACE
        export K8S_CURRENT_NAMESPACE=$__LAST_K8S_NAMESPACE
        export __LAST_K8S_NAMESPACE=$a
        kubectl config set-context "$K8S_CURRENT_CONTEXT" --namespace="$K8S_CURRENT_NAMESPACE"
    elif [ "" != "$1" ]; then
        export __LAST_K8S_NAMESPACE=$K8S_CURRENT_NAMESPACE
        export K8S_CURRENT_NAMESPACE=$1
        kubectl config set-context "$K8S_CURRENT_CONTEXT" --namespace="$K8S_CURRENT_NAMESPACE"
    else
        ns=$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"$K8S_CURRENT_CONTEXT\")].context.namespace}")
        if [ "" = "$ns" ]; then
            ns="default"
        fi
        if [ "" = "$1" ]; then
            echo "$ns"
        fi
    fi
}

# kenv context autocompletion. K8S_STATUS_LINE_CONTEXTS should be a
# space-delimited list of context names.
if [ "" = "$K8S_STATUS_LINE_CONTEXTS" ]; then
    export K8S_STATUS_LINE_CONTEXTS="dev"
fi
__completeKenv() {
	cur="${COMP_WORDS[COMP_CWORD]}"
    cmds=$K8S_STATUS_LINE_CONTEXTS
	COMPREPLY=($(compgen -d -f -W "$cmds" -- $cur))
	return 0
}
complete -o dirnames -o filenames -F __completeKenv kctx

# k8s status line
# Displays a UTF-8 icon and the current kubectl context and namespace:
# âŽˆ docker-for-desktop/default
__k8s_status() {
    if [ "enabled" = "$K8S_STATUS_LINE" ]; then

        printf "${K8S_PS1_SYMBOL} $K8S_CURRENT_CONTEXT/$(kns)"
    fi
}
export -f __k8s_status
if [ "" = "$K8S_PS1_SYMBOL" ]; then
    if ((BASH_VERSINFO[0] >= 4)) && [[ $'\u2388 ' != "\\u2388 " ]]; then
        export K8S_PS1_SYMBOL="k8s"
    else
        export K8S_PS1_SYMBOL=$'\xE2\x8E\x88'
    fi
fi

# Enable or disable the k8s status line output
# `kprompt`                - show the current status
# `kpromt off`             - disable status output
# `kpromt <anything else>` - enable status output
kprompt() {
    if [ "" == "$1" ]; then
        echo $K8S_STATUS_LINE
    elif [ "off" != "$1" ]; then
        eval 'export K8S_STATUS_LINE=enabled'
    else
        eval 'export K8S_STATUS_LINE=disabled'
    fi
}
export -f kprompt
export K8S_STATUS_LINE=enabled
