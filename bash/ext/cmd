#!/usr/bin/env bash

# extend any command with additional arguments

# Load all of the custom commands in bash/ext/.
__ext_load() {
    extensions=${HOME}/.dotfiles/bash/ext
    for ext in $(find $extensions -maxdepth 1 -type d -and -not -name '.*'); do
        if [ "$ext" != "$extensions" ]; then
            # alias the command to the __extcmd wrapper method
            alias $(basename $ext)="__extcmd $(basename $ext)"
            for cmd in $(find $ext -maxdepth 1 -type f); do
                # source the custom function and export it
                # function names must match '__ext_[command]_[custom command or override]'
                source $ext/$(basename $cmd)
                export -f "__ext_$(basename $ext)_$(basename $cmd)"
            done
        fi
    done
}
__ext_load

# command wrapper
#   Executes any custom commands found in the ./lib directory and
#   displays an interactive menu for "did you mean" error suggestions.
__extcmd() {
    arg=1
    cmd="__ext"
    found=0
    shift_to=1
    tst=$cmd

    # search for matching exported function
    for part in "${@}"; do
        ((arg=arg+1))
        tst="${tst}_${part}"
        if [ "function" = "$(type -t "${tst}")" ] && [ "${#cmd}" -lt "${#tst}" ]; then
            shift_to=$arg
            cmd=$tst
            found=1
        fi
    done

    # execute matching function, else execute the default command
    if [ "1" = "$found" ]; then
        echo "$1 extension: ${cmd} ${@:$shift_to}"
        $(echo "$cmd" "${@:$shift_to}")
    else
        /usr/bin/env $1 "${@:2}"
    fi
}
export -f "__extcmd"
